-- MySQL dump 10.13  Distrib 5.7.9, for Win64 (x86_64)
--
-- Host: localhost    Database: food_safety
-- ------------------------------------------------------
-- Server version	5.7.13-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `t_algorithm`
--

DROP TABLE IF EXISTS `t_algorithm`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_algorithm` (
  `id` varchar(36) NOT NULL,
  `attachment_id` varchar(36) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL COMMENT '1 预处理算法 2 评价算法',
  `category` int(11) DEFAULT '2' COMMENT '1 系统预定义算法 2 自定义算法',
  `sample_code` text COMMENT '示例代码',
  `example` text COMMENT '实例',
  `memo` text,
  `status` tinyint(4) DEFAULT NULL,
  `operator` varchar(36) DEFAULT NULL,
  `ct` datetime DEFAULT NULL,
  `ut` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_algorithm`
--

LOCK TABLES `t_algorithm` WRITE;
/*!40000 ALTER TABLE `t_algorithm` DISABLE KEYS */;
INSERT INTO `t_algorithm` VALUES ('01ab37cf-9b10-4264-a747-9304736cebcf','67a843a1-c980-496a-bb46-2cd45648e6a7','SCALE','1',1,'function [sdata,me,standev,snewdata] = scale(data,scaltype,newdata);\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SCALING OF TRAINING SET %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n[m,n] = size(data);\nstandev = std(data);			% Vector of standard deviations\n\nme = scaltype*mean(data,1);		% Vector of means for autoscaling\n\nsdata = (data-me(ones(m,1),:))./standev(ones(m,1),:);	% Scaling \n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SCALING OF TEST SET %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nif nargin == 3	\n	mt = size(newdata,1);												\n	snewdata = (newdata-me(ones(mt,1),:))./standev(ones(mt,1),:);	% Scaling\nend\n\nif scaltype == 0\n	me = [];\nend\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','function [sdata,me,standev,snewdata] = scale(data,scaltype,newdata);\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SCALING OF TRAINING SET %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n[m,n] = size(data);\nstandev = std(data);			% Vector of standard deviations\n\nme = scaltype*mean(data,1);		% Vector of means for autoscaling\n\nsdata = (data-me(ones(m,1),:))./standev(ones(m,1),:);	% Scaling \n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SCALING OF TEST SET %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nif nargin == 3	\n	mt = size(newdata,1);												\n	snewdata = (newdata-me(ones(mt,1),:))./standev(ones(mt,1),:);	% Scaling\nend\n\nif scaltype == 0\n	me = [];\nend\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%','% 											\n%  function [sdata,me,standev,snewdata] = scale(data,scaltype,newdata)			\n% 											\n%  AIM:		Performs scaling to unit variance or autoscaling			\n% 		(centering + scaling to unit variance)									\n% 											\n%  PRINCIPLE:	Each column in the matrix of training data is divided by its standard	\n% 		deviation. For autoscaling, the columns are previously centered.	\n% 		Optionally, it is also possible to scale a new data set (test set),\n% 		using the parameters determined on the training set.			\n%  											\n%  INPUT:	data (m*n) : training set						\n% 		scaltype : type of scaling (0 : variance scaling, 1 : autoscaling)	\n% 		newdata (mt*n) : test set (optional)					\n% 											\n%  OUTPUT:	sdata (m*n) : scaled training set					\n% 		me (1*n) : vector of means from the training set (empty if only		\n% 			   variance scaling is performed)				\n% 		standev (1*n) : vector of standard deviations from the training set	\n% 		snewdata (mt*n) : scaled test set (optional)				\n%',1,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-05-17 10:57:57','2016-05-17 10:57:57'),('09a6454b-05dd-4c9d-bbc4-5126aa677c67',NULL,'算法2','1',2,NULL,NULL,NULL,0,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-03-28 17:53:33','2016-03-28 17:53:33'),('0d0d3126-0049-40f4-9c73-cf0ea6e61e42','6beaefb1-f81d-43d9-945b-e5f4b26b66b8','MSC','1',1,'function [xmsc,me,xtmsc]=MSC(x,first,last,xt)\n\nif nargin==1;\n first=input(\'The first variable for the correction: \');\n last=input(\'The last variables for the correction: \');\nend\n\n[m,n]=size(x);\nme=mean(x,1);\n\nfor i=1:m,							% for the x data\n p=polyfit(me(first:last),x(i,first:last),1);			% least square fit between mean spectrum and each spectrum (first-degree polynomial)最小二乘估计\n xmsc(i,:)=(x(i,:)-p(2)*ones(1,n))./(p(1)*ones(1,n));		% each spectrum is corrected每个样品的光谱校正\nend\n\nif nargin ==4;							% correction of new data by using the mean spectrum from x.对新的数据集也进行MSC校正\n [mt,nt]=size(xt);			\n for i=1:mt,\n  p=polyfit(me(first:last),xt(i,first:last),1);		% least square fit between mean spectrum and each new spectrum (first-degree polynomial)\n  xtmsc(i,:)=(xt(i,:)-p(2)*ones(1,n))./(p(1)*ones(1,n));	% each new spectrum is corrected\n end\nend','function [xmsc,me,xtmsc]=MSC(x,first,last,xt)\n\nif nargin==1;\n first=input(\'The first variable for the correction: \');\n last=input(\'The last variables for the correction: \');\nend\n\n[m,n]=size(x);\nme=mean(x,1);\n\nfor i=1:m,							% for the x data\n p=polyfit(me(first:last),x(i,first:last),1);			% least square fit between mean spectrum and each spectrum (first-degree polynomial)最小二乘估计\n xmsc(i,:)=(x(i,:)-p(2)*ones(1,n))./(p(1)*ones(1,n));		% each spectrum is corrected每个样品的光谱校正\nend\n\nif nargin ==4;							% correction of new data by using the mean spectrum from x.对新的数据集也进行MSC校正\n [mt,nt]=size(xt);			\n for i=1:mt,\n  p=polyfit(me(first:last),xt(i,first:last),1);		% least square fit between mean spectrum and each new spectrum (first-degree polynomial)\n  xtmsc(i,:)=(xt(i,:)-p(2)*ones(1,n))./(p(1)*ones(1,n));	% each new spectrum is corrected\n end\nend','偏最小二乘',1,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-15 15:36:45','2016-04-15 15:36:45'),('1316e7e2-2eb9-4033-8e04-1bae6ce760a4',NULL,'','1',2,'','@RequestMapping(\"info\")\n    public String algorithmInfo(@RequestParam(name=\"algorithmId\") String id, HttpServletRequest request){\n        Algorithm algorithm = algorithmService.queryAlgorithmById(id);\n        List<AlgorithmParams> algorithmParamses = algorithmService.queryAlgorithmParams(id);\n        request.setAttribute(\"algorithm\",algorithm);\n        request.setAttribute(\"params\",algorithmParamses);\n        return \"/algorithm/algorithm_info\";\n    }',NULL,0,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-05 15:13:35','2016-04-05 15:13:35'),('1c1c1986-7463-49cd-866b-80e1e373234c','5d7c924e-7ab9-4b4d-bf38-191f61710731','自定义算法','1',2,'algorithm.setId(algorithmId);\n        algorithm.setCategory(Constant.CUSTOMER_ALGORITHM);\n        algorithm.setOperator(dto.getOperator());\n        algorithm.setSampleCode(dto.getSampleCode());\n        algorithm.setExample(dto.getExample());\n        algorithm.setType(dto.getAlgorithmType());\n        algorithm.setName(dto.getAlgorithmName());','algorithm.setId(algorithmId);\n        algorithm.setCategory(Constant.CUSTOMER_ALGORITHM);\n        algorithm.setOperator(dto.getOperator());\n        algorithm.setSampleCode(dto.getSampleCode());\n        algorithm.setExample(dto.getExample());\n        algorithm.setType(dto.getAlgorithmType());\n        algorithm.setName(dto.getAlgorithmName());','自定义算法',0,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-20 10:14:11','2016-04-20 10:14:11'),('21b4c0ea-bf69-4e01-b4d4-f0185c4d6fae','257a6dab-8b63-49e5-bc2a-debadef546cf','我是来测试的','1',2,'var x = 1\nvar y = 2','var x = 1\nvar y = 2','',1,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-05 14:58:14','2016-04-26 11:16:17'),('32f8bb24-9c96-4349-95b0-f5988095fc6f','e26d23e9-13f5-4b97-bd7d-f81dc34f9ac5','测试算法','2',2,'@RequestMapping(\"info\")\n    public String algorithmInfo(@RequestParam(name=\"algorithmId\") String id, HttpServletRequest request){\n        Algorithm algorithm = algorithmService.queryAlgorithmById(id);\n        List<AlgorithmParams> algorithmParamses = algorithmService.queryAlgorithmParams(id);\n        request.setAttribute(\"algorithm\",algorithm);\n        request.setAttribute(\"params\",algorithmParamses);\n        return \"/algorithm/algorithm_info\";\n    }','@RequestMapping(\"info\")\n    public String algorithmInfo(@RequestParam(name=\"algorithmId\") String id, HttpServletRequest request){\n        Algorithm algorithm = algorithmService.queryAlgorithmById(id);\n        List<AlgorithmParams> algorithmParamses = algorithmService.queryAlgorithmParams(id);\n        request.setAttribute(\"algorithm\",algorithm);\n        request.setAttribute(\"params\",algorithmParamses);\n        return \"/algorithm/algorithm_info\";\n    }','',0,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-05 15:06:28','2016-04-12 10:08:30'),('517c389d-3e4a-49ca-8798-52b487f33f0f',NULL,'测试','1',2,'','',NULL,1,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-05 14:55:08','2016-04-05 14:55:08'),('553e744c-d97f-47e5-8f62-3d69cf9e542b','f9f0d510-7de9-4a20-9294-f262a641034d','112','4',2,'asdfasdfsadfasdgadgadfgadfgabadfgqdfgadbqdfgdafgadfbvadcgqefgqergdcgafgq3rgadfgafgqrgrgafg','afdgafgaefgqaefgadgawergadgasdf','',1,'1','2017-06-28 09:12:11','2017-06-28 09:12:11'),('683f706b-09cd-4026-9513-bf9da4e4687e','251b4c56-b287-43ed-9524-22a3ecdc932e','测试测试','2',2,'function search() {\n	$(\"#currsor\").val(1);//将curror值设置为1，不然后台会做分页，导致查不到数据\n	loadData();\n}function search() {\n	$(\"#currsor\").val(1);//将curror值设置为1，不然后台会做分页，导致查不到数据\n	loadData();\n}','function search() {\n	$(\"#currsor\").val(1);//将curror值设置为1，不然后台会做分页，导致查不到数据\n	loadData();\n}function search() {\n	$(\"#currsor\").val(1);//将curror值设置为1，不然后台会做分页，导致查不到数据\n	loadData();\n}function search() {\n	$(\"#currsor\").val(1);//将curror值设置为1，不然后台会做分页，导致查不到数据\n	loadData();\n}','function search() {\n	$(\"#currsor\").val(1);//将curror值设置为1，不然后台会做分页，导致查不到数据\n	loadData();\n}function search() {\n	$(\"#currsor\").val(1);//将curror值设置为1，不然后台会做分页，导致查不到数据\n	loadData();\n}',0,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-12 14:38:23','2016-04-12 14:38:23'),('6e3c3bd9-f642-484e-93a0-4b98a711d42e','0b003161-fc50-4df4-bb90-774b737e4267','a','1',2,'a','a','',0,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-07 14:33:30','2016-04-07 14:33:30'),('6ec23bef-871c-44b1-b54b-ae464515328a','7bdd4e3b-0fc5-47a2-89bf-dd9c918f56d9','附件测试','2',2,'@RequestMapping(\"save\")\n	@ResponseBody\n	public Map<String,Object> saveInstrument(InstrumentWithBLOBs instrument,HttpServletRequest request){\n		logger.debug(\"保存设备信息：{}\",JsonMapper.nonEmptyMapper().toJson(instrument));\n		Map<String,Object> result = Maps.newHashMap();\n        try {\n			MultipartRequest multipartRequest = (MultipartRequest) request;\n			Map<String,MultipartFile> fileMap = multipartRequest.getFileMap();\n			MultipartFile file =  fileMap.get(\"attachment\");\n            User user = super.getSessionUser();\n            if(file != null){\n               String path = FileUtil.getInstrumentAttachmentUploadPath();\n               //不分文件夹,所以url 和fileFullName 是一样的\n               String attachmentId =  attachmentService.saveAttachment(file,user.getId(),path);\n               instrument.setAttachmentId(attachmentId);\n           }\n            instrument.setOperator(user.getId());\n            instrumentService.saveOrUpdateInstrument(instrument);\n            result.put(\"success\", Constant.EXEC_SUCCESS);\n        } catch (Exception e) {\n            logger.error(\"保存设备失败：{}\", Throwables.getStackTraceAsString(e));\n            result.put(\"success\",Constant.EXEC_ERROR);\n        }\n		return result;\n	}','@RequestMapping(\"save\")aa\n	@ResponseBody\n	public Map<String,Object> saveInstrument(InstrumentWithBLOBs instrument,HttpServletRequest request){\n		logger.debug(\"保存设备信息：{}\",JsonMapper.nonEmptyMapper().toJson(instrument));\n		Map<String,Object> result = Maps.newHashMap();\n        try {\n			MultipartRequest multipartRequest = (MultipartRequest) request;\n			Map<String,MultipartFile> fileMap = multipartRequest.getFileMap();\n			MultipartFile file =  fileMap.get(\"attachment\");\n            User user = super.getSessionUser();\n            if(file != null){\n               String path = FileUtil.getInstrumentAttachmentUploadPath();\n               //不分文件夹,所以url 和fileFullName 是一样的\n               String attachmentId =  attachmentService.saveAttachment(file,user.getId(),path);\n               instrument.setAttachmentId(attachmentId);\n           }\n            instrument.setOperator(user.getId());\n            instrumentService.saveOrUpdateInstrument(instrument);\n            result.put(\"success\", Constant.EXEC_SUCCESS);\n        } catch (Exception e) {\n            logger.error(\"保存设备失败：{}\", Throwables.getStackTraceAsString(e));\n            result.put(\"success\",Constant.EXEC_ERROR);\n        }\n		return result;\n	}','aaaa',0,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-05 15:30:21','2016-04-05 16:51:57'),('74839f13-f278-494c-97fd-ce273c312e18','02ab1ce8-5858-4531-aab6-6da0d43a6813','自定义001','1',2,'自定义001','自定义001','自定义001',1,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-22 10:22:31','2016-04-22 10:20:28'),('8427ccd3-dc4f-4b4a-a294-0351652d7f49','3d8f968d-cab2-46f6-ba8f-5b3e2a9cc0bc','添加测试','1',2,'<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n			<!-- <fileNamePattern>/logs/food_safety/food_safety.%d{yyyy-MM-dd}.log</fileNamePattern> -->\n			<fileNamePattern>/home/ichinait/logs/food_safety-%d{yyyy-MM-dd}.log</fileNamePattern>\n			<!-- 保留 30天数据，默认无限-->\n			<maxHistory>60</maxHistory>\n		</rollingPolicy>','<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n			<!-- <fileNamePattern>/logs/food_safety/food_safety.%d{yyyy-MM-dd}.log</fileNamePattern> -->\n			<fileNamePattern>/home/ichinait/logs/food_safety-%d{yyyy-MM-dd}.log</fileNamePattern>\n			<!-- 保留 30天数据，默认无限-->\n			<maxHistory>60</maxHistory>\n		</rollingPolicy>','<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">',0,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-05 16:54:25','2016-04-05 16:54:25'),('9942ab56-8390-4985-b101-75497d2310fd',NULL,'测试','1',2,'','',NULL,0,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-05 14:57:37','2016-04-05 14:57:37'),('a6ecd845-26e4-4222-84d8-0518c085ba00','44cf60b1-6561-418d-8756-dbaf66c2c156','test','3',2,'fdgafgadfgagadgafdgadfgadfdgsadfgadfgadfgaergqeryqefhasdfhq35yaedhaeradfgaergaacgaergathetyjh56yq24tfgq','34yth','',1,'1','2017-06-28 09:11:21','2017-06-28 09:11:21'),('d5d6d9f4-e1c6-45fe-9e93-86fea72f352d',NULL,'算法1','1',2,NULL,NULL,NULL,1,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-03-28 17:53:10','2016-03-28 17:53:10'),('edc652a9-a9a0-471f-a6c8-5db134dbdc17',NULL,'测试','1',2,NULL,NULL,NULL,1,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-04-05 14:42:39','2016-04-05 14:42:39'),('f3563d53-c19e-4f91-8883-0391be715020','5361fab6-2099-4de3-baef-ea1b29d6e56f','DERIV','1',1,'%  function [dx] = deriv(x,der,window,order)				\n%								\n%  AIM: 	Derivative computation by using the Savitsky-Golay				 		\n%		algorithm. 		 使用S-G卷积求导运算				\n%									\n%  PRINCIPLE:  Differentiation by convolution method. 卷积		 	\n%									\n%  INPUT:	x	- Data Matrix: (nxm) n spectra m variables\n%                         原始光谱（处理的时候，第一行为波长保持不变）\n% 		der	- (1x1) degree of the derivative; 	求导的阶数	\n% 			  it must be <= order				\n% 		window	- (optional), (1x1) the number of points  	\n% 			  in filter, it must be >3 and odd卷积窗口点数>3且为奇数\n% 		order	- (optional), (1x1) the order of the polynomial多项式次数 \n% 			  It must be <=5 and <= (window-1)					   					\n% 								\n%   OUTPUT:	dx	- Matrix of differentiated function (nxm)微分矩阵\n% 									\n%   SUBROUTINE:								\n% 		weight.m						\n% 		genfact.m						\n% 		grampoly.m						\n% 								\n			\n\nfunction dx = deriv(x,der,window,order)\n\n[nr,nc]=size(x);\nif (nargin<4)\n  order = 2;  \nend\nif (nargin<3)  \n  window=min(17,floor(nc/2)); \nend\nif (nargin<2)\n  disp(\' function dx = deriv(x,der)\')\nend   		\n\nm = fix(window/2);%fix,取整 	\n\np = round(window/2);%round,四舍五入\n\no=order;\n\nfor i=1:window\n    i0=i-p;\n    for j=1:window,\n       j0=j-p;\n       w(i,j)=weight(i0,j0,m,o,der);\n    end\nend\nyr(:,1:m)=x(:,[1:window])*w(:,1:m);		% First window\nfor i=1:(nc-2*m)				% Middle\n    yr(:,i+m)=x(:,[i:(i+2*m)])*w(:,p);\nend\na=nc-2*m;					% Last window\nyr(:,(nc-m+1):nc)=x(:,a:nc)*w(:,p+1:window); \ndx=yr;\n\n\nend','%  function [dx] = deriv(x,der,window,order)				\n%								\n%  AIM: 	Derivative computation by using the Savitsky-Golay				 		\n%		algorithm. 		 使用S-G卷积求导运算				\n%									\n%  PRINCIPLE:  Differentiation by convolution method. 卷积		 	\n%									\n%  INPUT:	x	- Data Matrix: (nxm) n spectra m variables\n%                         原始光谱（处理的时候，第一行为波长保持不变）\n% 		der	- (1x1) degree of the derivative; 	求导的阶数	\n% 			  it must be <= order				\n% 		window	- (optional), (1x1) the number of points  	\n% 			  in filter, it must be >3 and odd卷积窗口点数>3且为奇数\n% 		order	- (optional), (1x1) the order of the polynomial多项式次数 \n% 			  It must be <=5 and <= (window-1)					   					\n% 								\n%   OUTPUT:	dx	- Matrix of differentiated function (nxm)微分矩阵\n% 									\n%   SUBROUTINE:								\n% 		weight.m						\n% 		genfact.m						\n% 		grampoly.m						\n% 								\n			\n\nfunction dx = deriv(x,der,window,order)\n\n[nr,nc]=size(x);\nif (nargin<4)\n  order = 2;  \nend\nif (nargin<3)  \n  window=min(17,floor(nc/2)); \nend\nif (nargin<2)\n  disp(\' function dx = deriv(x,der)\')\nend   		\n\nm = fix(window/2);%fix,取整 	\n\np = round(window/2);%round,四舍五入\n\no=order;\n\nfor i=1:window\n    i0=i-p;\n    for j=1:window,\n       j0=j-p;\n       w(i,j)=weight(i0,j0,m,o,der);\n    end\nend\nyr(:,1:m)=x(:,[1:window])*w(:,1:m);		% First window\nfor i=1:(nc-2*m)				% Middle\n    yr(:,i+m)=x(:,[i:(i+2*m)])*w(:,p);\nend\na=nc-2*m;					% Last window\nyr(:,(nc-m+1):nc)=x(:,a:nc)*w(:,p+1:window); \ndx=yr;\n\n\nend','%  function [dx] = deriv(x,der,window,order)				\n%								\n%  AIM: 	Derivative computation by using the Savitsky-Golay				 		\n%		algorithm. 		 使用S-G卷积求导运算				\n%									\n%  PRINCIPLE:  Differentiation by convolution method. 卷积		 	\n%									\n%  INPUT:	x	- Data Matrix: (nxm) n spectra m variables\n%                         原始光谱（处理的时候，第一行为波长保持不变）\n% 		der	- (1x1) degree of the derivative; 	求导的阶数	\n% 			  it must be <= order				\n% 		window	- (optional), (1x1) the number of points  	\n% 			  in filter, it must be >3 and odd卷积窗口点数>3且为奇数\n% 		order	- (optional), (1x1) the order of the polynomial多项式次数 \n% 			  It must be <=5 and <= (window-1)					   					\n% 								\n%   OUTPUT:	dx	- Matrix of differentiated function (nxm)微分矩阵\n% 									\n%   SUBROUTINE:								\n% 		weight.m						\n% 		genfact.m						\n% 		grampoly.m						\n% 								\n			\n\nfunction dx = deriv(x,der,window,order)\n\n[nr,nc]=size(x);\nif (nargin<4)\n  order = 2;  \nend\nif (nargin<3)  \n  window=min(17,floor(nc/2)); \nend\nif (nargin<2)\n  disp(\' function dx = deriv(x,der)\')\nend   		\n\nm = fix(window/2);%fix,取整 	\n\np = round(window/2);%round,四舍五入\n\no=order;\n\nfor i=1:window\n    i0=i-p;\n    for j=1:window,\n       j0=j-p;\n       w(i,j)=weight(i0,j0,m,o,der);\n    end\nend\nyr(:,1:m)=x(:,[1:window])*w(:,1:m);		% First window\nfor i=1:(nc-2*m)				% Middle\n    yr(:,i+m)=x(:,[i:(i+2*m)])*w(:,p);\nend\na=nc-2*m;					% Last window\nyr(:,(nc-m+1):nc)=x(:,a:nc)*w(:,p+1:window); \ndx=yr;\n\n\nend',1,'1872e8e6-fadc-4746-8b83-f7ecf4db5b2c','2016-05-17 16:44:29','2016-05-17 16:57:06'),('f85a84a8-3369-43bb-9247-9f0221565e6f','303f18d6-9748-4717-baf7-289ae1324774','MSC','1',2,'% 										\n%   function [xmsc,me,xtmsc]=msc(x,first,last,xt)			\n% 								\n%   AIM: 	Multiple Scatter Correction:				\n% 		To remove the effect of physical light scatter 		  从光谱中去除光的散射效应\n% 		from the spectrum. (Compensation for particle size effects.)	\n% 								\n% 								\n%   PRINCIPLE:  Each spectrum is shifted and rotated so that it fits 	\n%               as closely as possible to the mean spectrum of the data.\n% 		The fit is achieved by LS (first-degree polynomial多项式).	\n% 		The correction depends on the mean spectrum of the 	\n% 		training set.	校正依赖于训练集的平均光谱					\n%  									\n%  INPUT:	x: (m x n) matrix with m spectra and n variables	\n% 		first: first variable used for correction	用于校正的起始变量	\n% 		last: last variable used for correction		用于矫正的最终变量	\n% 		 (A segment is selected which is representative for the	\n% 		 baseline of the spectra.)				\n% 		xt: (mt x nt) matrix for new data (optional)	,待校正的新光谱(其校正方法和参数使用训练集校正时使用的参数)	\n% 			 						\n%   OUTPUT:	xmsc: (m x n) matrix containing the spectra after	\n% 		    	  correction with msc				\n% 		me: mean spectrum (1 x n) of x				\n% 		xtmsc: (mt x nt) matrix containing the new spectra after\n% 			  correction with msc							\n	\n\nfunction [xmsc,me,xtmsc]=msc(x,first,last,xt);	\n\nif nargin==1;\n   first=input(\'The first variable for the correction: \');\n   last=input(\'The last variables for the correction: \');\nend\n\n[m,n]=size(x);\nme=mean(x,1);\n\nfor i=1:m,							% for the x data\n  p=polyfit(me(first:last),x(i,first:last),1);			% least square fit between mean spectrum and each spectrum (first-degree polynomial)最小二乘估计\n  xmsc(i,:)=(x(i,:)-p(2)*ones(1,n))./(p(1)*ones(1,n));		% each spectrum is corrected每个样品的光谱校正\nend\n\nif nargin ==4;							% correction of new data by using the mean spectrum from x.对新的数据集也进行MSC校正\n[mt,nt]=size(xt);			\n  for i=1:mt,\n    p=polyfit(me(first:last),xt(i,first:last),1);		% least square fit between mean spectrum and each new spectrum (first-degree polynomial)\n    xtmsc(i,:)=(xt(i,:)-p(2)*ones(1,n))./(p(1)*ones(1,n));	% each new spectrum is corrected\n  end\nend','% 										\n%   function [xmsc,me,xtmsc]=msc(x,first,last,xt)			\n% 								\n%   AIM: 	Multiple Scatter Correction:				\n% 		To remove the effect of physical light scatter 		  从光谱中去除光的散射效应\n% 		from the spectrum. (Compensation for particle size effects.)	\n% 								\n% 								\n%   PRINCIPLE:  Each spectrum is shifted and rotated so that it fits 	\n%               as closely as possible to the mean spectrum of the data.\n% 		The fit is achieved by LS (first-degree polynomial多项式).	\n% 		The correction depends on the mean spectrum of the 	\n% 		training set.	校正依赖于训练集的平均光谱					\n%  									\n%  INPUT:	x: (m x n) matrix with m spectra and n variables	\n% 		first: first variable used for correction	用于校正的起始变量	\n% 		last: last variable used for correction		用于矫正的最终变量	\n% 		 (A segment is selected which is representative for the	\n% 		 baseline of the spectra.)				\n% 		xt: (mt x nt) matrix for new data (optional)	,待校正的新光谱(其校正方法和参数使用训练集校正时使用的参数)	\n% 			 						\n%   OUTPUT:	xmsc: (m x n) matrix containing the spectra after	\n% 		    	  correction with msc				\n% 		me: mean spectrum (1 x n) of x				\n% 		xtmsc: (mt x nt) matrix containing the new spectra after\n% 			  correction with msc							\n	\n\nfunction [xmsc,me,xtmsc]=msc(x,first,last,xt);	\n\nif nargin==1;\n   first=input(\'The first variable for the correction: \');\n   last=input(\'The last variables for the correction: \');\nend\n\n[m,n]=size(x);\nme=mean(x,1);\n\nfor i=1:m,							% for the x data\n  p=polyfit(me(first:last),x(i,first:last),1);			% least square fit between mean spectrum and each spectrum (first-degree polynomial)最小二乘估计\n  xmsc(i,:)=(x(i,:)-p(2)*ones(1,n))./(p(1)*ones(1,n));		% each spectrum is corrected每个样品的光谱校正\nend\n\nif nargin ==4;							% correction of new data by using the mean spectrum from x.对新的数据集也进行MSC校正\n[mt,nt]=size(xt);			\n  for i=1:mt,\n    p=polyfit(me(first:last),xt(i,first:last),1);		% least square fit between mean spectrum and each new spectrum (first-degree polynomial)\n    xtmsc(i,:)=(xt(i,:)-p(2)*ones(1,n))./(p(1)*ones(1,n));	% each new spectrum is corrected\n  end\nend','',1,'1','2017-06-20 16:14:57','2017-06-20 16:15:25');
/*!40000 ALTER TABLE `t_algorithm` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-11-09 21:31:01
